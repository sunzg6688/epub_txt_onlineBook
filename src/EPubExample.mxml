<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="creationComplete()"
			   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import skin.prevBtnSkin;
			import epub.NcxNavPoint;
			import epub.OpfPage;
			
			import flash.text.engine.TextLine;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			
			import EpubModel;
			
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.factory.TextFlowTextLineFactory;
			
			public var _model:EpubModel;
			public var _bookUrl:String = "hej.epub";
			public var currentPageIndex:int=9;
			public var currentPage:OpfPage;
			
			public var isLastOpf:Boolean=false;
			public var isFirstOpf:Boolean=false;
			
			public function creationComplete():void 
			{
				_model = new EpubModel();
				_model.loadBook(_bookUrl);
				ta.width=this.width-60;
				ta.height=this.height-80;
			}
			
			public function initPage():void{
				this.currentPage=_model.book.spine.pages[currentPageIndex];
				ta.textFlow=currentPage.textFlow;
				ncxList.dataProvider=new ArrayCollection(_model.book.toc.contents);
				readyNcx();
				initView();
			}
			
			public function setFirstOrLast(_index:int):void{
				if(_index<=0){
					isFirstOpf=true;
					isLastOpf=false;
				}else{
					isFirstOpf=false;
				}
				if(_index>=_model.book.spine.pages.length-1){
					isLastOpf=true;
					isFirstOpf=false;
				}else{
					isLastOpf=false;
				}
			}
			
			protected function prevOpfPage():void
			{
				// TODO Auto-generated method stub
				currentPageIndex--;
				isLastOpf=false;
				if(currentPageIndex==0){
					isFirstOpf=true;
					currentPage=_model.book.spine.pages[currentPageIndex];
					ta.textFlow=_model.book.spine.pages[currentPageIndex].textFlow;
					pageNum.text=currentPageIndex.toString();
					changListSelected();
					cutPrevOpfPage(this.currentPage);
				}else if(currentPageIndex<0){
					currentPageIndex=0;
					isFirstOpf=true;
				}else{
					isFirstOpf=false;
					currentPage=_model.book.spine.pages[currentPageIndex];
					ta.textFlow=_model.book.spine.pages[currentPageIndex].textFlow;
					pageNum.text=currentPageIndex.toString();
					changListSelected();
					cutPrevOpfPage(this.currentPage);
				}
			}
			
			protected function nextOpfPage():void
			{
				// TODO Auto-generated method stub
				isFirstOpf=false;
				currentPageIndex++;
				if(currentPageIndex==_model.book.spine.pages.length-1){
					isLastOpf=true;
					currentPage=_model.book.spine.pages[currentPageIndex];
					ta.textFlow=_model.book.spine.pages[currentPageIndex].textFlow;
					pageNum.text=currentPageIndex.toString();
					changListSelected();
					this.cutNextOpfPage(this.currentPage);
				}else if(currentPageIndex>_model.book.spine.pages.length-1){
					currentPageIndex=_model.book.spine.pages.length-1;
					isLastOpf=true;
				}else{
					isLastOpf=false;
					currentPage=_model.book.spine.pages[currentPageIndex];
					ta.textFlow=_model.book.spine.pages[currentPageIndex].textFlow;
					pageNum.text=currentPageIndex.toString();
					changListSelected();
					this.cutNextOpfPage(this.currentPage);
				}
				
			}
			
			public function readyNcx():void{
				ncxList.addEventListener(MouseEvent.CLICK,showSelectedPage);
			}
			
			public function showSelectedPage(event:MouseEvent):void{
				var _p:NcxNavPoint=List(FlexGlobals.topLevelApplication.ncxList).selectedItem as NcxNavPoint;
				var _op:OpfPage=_model.book.spine.getPageByPath(_p.path);
				currentPage=_op;
				FlexGlobals.topLevelApplication.ta.textFlow=_op.textFlow;
				currentPageIndex=_model.book.spine.getPageNumberByPath(_p.path);
				pageNum.text=currentPageIndex.toString();
			}
			
			public function changListSelected():void{
				var _p:NcxNavPoint;
				for(var i:int=0;i<_model.book.toc.contents.length;i++){
					_p=_model.book.toc.contents[i];
					if(currentPage.path==_p.path){
						ncxList.selectedIndex=i;
					}
				}
			}
			
			public var markPages:Array=[];
			public function markPage():void{
				
			}
			
			protected function markBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(markPages.indexOf(currentPage)==-1){
					markPages.push(currentPage);
					var _markPage:MarkPage=new MarkPage();
					_markPage.page=currentPage;
					_markPage.y=markPages.length*40;
					markGroup.addElement(_markPage);
				}
				
			}
			
			public function initView():void{
				ta.visible=false;
				resetPageSize(true);
				this.cutNextOpfPage(currentPage);
				showViewPageW();
			}
			
			public var viewPagePool:Vector.<ViewPage>=new Vector.<ViewPage>();
			
			public function initViewPagePool():void{
				for(var i:int=0;i<100;i++){
					var vp:ViewPage=new ViewPage();
				}
			}
			
			public function getViewPage():ViewPage{
				var vp:ViewPage;
				if(viewPagePool.length>0){
					vp=viewPagePool.shift();
				}else{
					vp=new ViewPage();
				}
				vp.resetSize(this.ViewPageWidth,this.ViewPageHeight);
				return vp;
			}
			
			public var viewPages:Array=new Array();
			public var tempVP:ViewPage;
			public var _line:TextLine;
			public var _lineArr:Array = [];
			
			public var tempTF:TextFlow = new TextFlow();
			
			public var tempTFLF:TextFlowTextLineFactory = new TextFlowTextLineFactory();
			
			public function cutNextOpfPage(op:OpfPage):void{
				_lineArr=[];
				tempTF=op.textFlow;
				tempTFLF.compositionBounds = new Rectangle(0, 0, this.ViewPageWidth-20, 100000);
				tempTFLF.createTextLines(_lineArr.push, tempTF);
				var _linePosY:int = 0;
				var _lineIndex:int = 0;
				var _opIndex:int=0;
				var _isFirstPage:Boolean=true;
				while(_lineIndex < _lineArr.length){
					_line=_lineArr[_lineIndex] as TextLine;
					//					_line = _lineArr.shift() as TextLine;
					if(_isFirstPage){
						tempVP=getViewPage();
						tempVP.opfPage=op;
						tempVP.opfPageIndex=_opIndex;
						if(isWidth){
							tempVP.index=_opIndex;
						}else{
							tempVP.index=_opIndex/2;
						}
						this.viewPages.push(tempVP);
						_opIndex++;
						tempVP.addLine(_line);
						_isFirstPage=false;
					}else{
						if(_line.height<tempVP.ly){
							tempVP.addLine(_line);
						}else{
							tempVP.updateTF();
							tempVP=getViewPage();
							tempVP.opfPage=op;
							tempVP.opfPageIndex=_opIndex;
							if(isWidth){
								tempVP.index=_opIndex;
							}else{
								tempVP.index=_opIndex/2;
							}
							viewPages.push(tempVP);
							_opIndex++;
							tempVP.addLine(_line);
						}
					}
					_lineIndex++;
				}
				tempVP.updateTF();
				tempVP=null;
				
			}
			
			//往前翻
			public var newViewPageArr:Array=[];
			public var prevPos:int=0;
			public function cutPrevOpfPage(op:OpfPage):void{
				newViewPageArr=[];
				_lineArr=[];
				tempTF=op.textFlow;
				tempTFLF.compositionBounds = new Rectangle(0, 0, this.ViewPageWidth, 100000);
				tempTFLF.createTextLines(_lineArr.push, tempTF);
				
				var _linePosY:int = 0;
				var _lineIndex:int = 0;
				var _opIndex:int=0;
				var _isFirstPage:Boolean=true;
				while(_lineIndex < _lineArr.length){
					_line = _lineArr[_lineIndex] as TextLine;
					if(_isFirstPage){
						tempVP=getViewPage();
						tempVP.opfPage=op;
						tempVP.opfPageIndex=_opIndex;
						if(isWidth){
							tempVP.index=_opIndex;
						}else{
							tempVP.index=_opIndex/2;
						}
						this.newViewPageArr.push(tempVP);
						_opIndex++;
						tempVP.addLine(_line);
						_isFirstPage=false;
					}else{
						if(_line.height<tempVP.ly){
							tempVP.addLine(_line);
						}else{
							tempVP.updateTF();
							tempVP=getViewPage();
							tempVP.opfPage=op;
							tempVP.opfPageIndex=_opIndex;
							if(isWidth){
								tempVP.index=_opIndex;
							}else{
								tempVP.index=_opIndex/2;
							}
							newViewPageArr.push(tempVP);
							_opIndex++;
							tempVP.addLine(_line);
						}
					}
					_lineIndex++;
				}
				tempVP.updateTF();
				tempVP=null;
				var _lg:int=this.newViewPageArr.length;
				if(isWidth){
					prevPos=_lg-1;
				}else{
					//					prevPos=_lg/2-1;
					prevPos=_lg-1;
				}
				for(var i:int=0;i<_lg;i++){
					this.viewPages.unshift(this.newViewPageArr[_lg-i-1]);
				}
			}
			
			public var isWidth:Boolean=true;
			public var ViewPageWidth:int;
			public var ViewPageHeight:int;
			public function resetPageSize(_isW:Boolean):void{
				isWidth=_isW;
				if(isWidth){
					this.ViewPageWidth=this.width-60;
					this.ViewPageHeight=this.height-60;
				}else{
					this.ViewPageWidth=this.width/2-30;
					this.ViewPageHeight=this.height-60;
				}
				
			}
			
			public var markWord:String;
			
			protected function sizeBtn_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				resetPageSize(!isWidth);
				this.viewPages=[];
				this.currentViewPageIndex=this.currentViewPage.index;
				this.currentPage=this.currentViewPage.opfPage;
				markWord=this.currentViewPage._markWord;
				var opIndex:int=this._model.book.spine.getPageNumberByPage(currentPage);
				this.currentPageIndex=opIndex;
				setFirstOrLast(this.currentPageIndex);
				cutNextOpfPage(this.currentPage);
				if(bookView.numElements!=0){
					bookView.removeAllElements();
				}
				if(!isWidth){
					preViewPage();
					this.initPageFlip(currentViewPageIndex);
				}else{
					showViewPageW(currentViewPageIndex);
				}
			}
			
			public var currentViewPageIndex:int=0;
			public var currentViewPage:ViewPage;
			
			public function nextViewPage():void{
				if(isWidth){
					nextViewPageW();
				}else{
					nextViewPageL();
				}
			}
			public function prevViewPage():void{
				if(isWidth){
					prevViewPageW();
				}else{
					prevViewPageL();
				}
			}
			
			public function nextViewPageW():void{
				this.currentViewPageIndex++;
				if(this.currentViewPageIndex>viewPages.length-1){
					if(isLastOpf){
						this.currentViewPageIndex--;
						this.currentViewPage=this.viewPages[viewPages.length-1];
						return;
					}
					//					if(this.viewPages.length>1000){
					//						for(var i:int=0;i<500;i++){
					//							this.viewPagePool.push(this.viewPages.shift());
					//							this.currentViewPageIndex=this.currentViewPageIndex-500;
					//						}
					//					}
					var op:OpfPage=this.currentViewPage.opfPage;
					var opIndex:int=this._model.book.spine.getPageNumberByPage(op);
					this.currentPageIndex=opIndex;
					setFirstOrLast(currentPageIndex);
					var _lg:int=this.viewPages.length;
					while(this.viewPages.length-_lg<50){
						if(isLastOpf){
							showViewPageW(currentViewPageIndex);
							return;
						}else{
							nextOpfPage();
						}
					}
				}
				showViewPageW(currentViewPageIndex);
			}
			
			
			public function prevViewPageW():void{
				this.currentViewPageIndex--;
				if(currentViewPageIndex<0){
					if(isFirstOpf){
						this.currentViewPageIndex++;
						this.currentViewPage=this.viewPages[0];
						return;
					}
					//					if(this.viewPages.length>1000){
					//						for(var i:int=0;i<500;i++){
					//							this.viewPagePool.push(this.viewPages.pop());
					//						}
					//					}
					var op:OpfPage=this.currentViewPage.opfPage;
					var opfIndex:int=this._model.book.spine.getPageNumberByPage(op);
					this.currentPageIndex=opfIndex;
					setFirstOrLast(currentPageIndex);
					var _lg:int=this.viewPages.length;
					while(this.viewPages.length-_lg<50){
						if(isFirstOpf){
							this.prevPos=this.viewPages.length-_lg-1;
							this.currentViewPageIndex=this.prevPos;
							showViewPageW(this.currentViewPageIndex);
							return;
						}else{
							prevOpfPage();
						}
					}
					this.prevPos=this.viewPages.length-_lg-1;
					this.currentViewPageIndex=this.prevPos;
				}
				showViewPageW(this.currentViewPageIndex);
			}
			
			public function showViewPageW(_index:int=0):void{
				if(bookView.numElements!=0){
					bookView.removeAllElements();
				}
				if(this.isWidth){
					var u:UIComponent=new UIComponent();
					u.addChild(this.viewPages[_index]);
					this.bookView.addElement(u);
					this.currentViewPage=this.viewPages[_index];
					this.currentViewPageIndex=_index;
					this.currentViewPage.updateTF();
				}
			}
			
			/*翻页使用*/
			public function nextViewPageL():void{
				nextPreCutOpf();
				if(mypageflip.book_totalpage!=totalpage){
					resetPageFlip(nowpage,false);
				}
				this.nowpage=mypageflip.book_page+2;
				if(nowpage<=this.totalpage){
					mypageflip.PageGoto(nowpage);
				}else{
					nowpage=this.totalpage;
				}
				
			}
			
			public function prevViewPageL():void{
				if(nowpage-2<0){
					prevPreCutOpf();
					if(mypageflip.book_totalpage!=totalpage){
						resetPageFlip(this.prevPos,true);
					}
				}
				this.nowpage=mypageflip.book_page-2;
				if(nowpage>=0){
					mypageflip.PageGoto(nowpage);
				}else{
					nowpage=0;
				}
				
			}
			
			public var totalpage:Number=0;
			public var nowpage:Number=0;
			public var pos_root:Point=new Point(0,0);
			public var mypageflip:PageFlipClass2=new PageFlipClass2();
			public var book_container:MovieClip=new MovieClip();
			public var point_root:MovieClip=new MovieClip();
			
			public function preViewPage():void{
				while(viewPages.length<50){
					if(this.isLastOpf){
						totalpage=viewPages.length;
						return;
					}
					this.nextOpfPage();
				}
				totalpage=viewPages.length;
			}
			
			public function initPageFlip(_index:int):void{
				mypageflip.book_totalpage=totalpage;
				if(_index<=0){
					mypageflip.book_page=1;
					nowpage=1;
				}else{
					//_index 是currentViewPageIndex 转换过来的  因为大页和小页并不是2倍关系 ,所以可能会超过边界
					if(_index*2>totalpage){
						var sIndex:int=totalpage/2;//取偶
						mypageflip.book_page=sIndex*2;
						nowpage=sIndex*2;
					}else{
						mypageflip.book_page=_index*2;
						nowpage=_index*2;
					}
				}
				
				mypageflip.book_root=book_container;
				mypageflip.book_initpage=totalpage;
				
				mypageflip.book_TimerNum=20;
				mypageflip.onPageEnd=onPageEnd;
				
				mypageflip.book_width=this.ViewPageWidth;
				mypageflip.book_height=this.ViewPageHeight;
				
				point_root.addChild(book_container);
				var ui:UIComponent=new UIComponent();
				ui.addChild(point_root);
				bookView.addElement(ui);
				mypageflip.resetBook();
				mypageflip.bookArr=[];
				mypageflip.bookArr=this.viewPages;
				mypageflip.InitBook();
				mypageflip.SetLoadMCNext();
				//				mypageflip.SetPageMC(nowpage);
				this.onPageEnd();
				resetViewPage(nowpage);
			}
			
			public function resetViewPage(nowP:int):void{
				if(nowP-1>=0&&nowP-1<this.viewPages.length){
					this.currentViewPage=this.viewPages[nowP-1];
				}else if(nowP-1>=this.viewPages.length){
					this.currentViewPage=this.viewPages[viewPages.length-1];
				}else if(nowP-1<0){
					this.currentViewPage=this.viewPages[0];
				}
			}
			public function onPageEnd():void {
				nowpage=mypageflip.book_page;
				//				indx.text="";
				//				total.text="/";
				//				indx.text=nowpage.toString();
				//				total.text="/"+pageArr.length.toString();
				if(nowpage-2<0){
					prevPreCutOpf();
					if(mypageflip.book_totalpage<totalpage){
						resetPageFlip(this.prevPos,true);
						nowpage=this.prevPos;
					}
				}else{
					nextPreCutOpf();
					if(mypageflip.book_totalpage<totalpage){
						resetPageFlip(nowpage,false);
					}
				}
				resetViewPage(nowpage);
			}
			
			public function prevPreCutOpf():void{
				this.currentPage=this.viewPages[0].opfPage;
				var opIndex:int=this._model.book.spine.getPageNumberByPage(currentPage);
				this.currentPageIndex=opIndex;
				setFirstOrLast(currentPageIndex);
				var _lg:int=this.viewPages.length;
				while(this.viewPages.length-_lg<50){
					if(this.isFirstOpf){
						this.prevPos=this.viewPages.length-_lg;
						totalpage=viewPages.length;
						return;
					}
					prevOpfPage();
				}
				this.prevPos=this.viewPages.length-_lg;
				totalpage=viewPages.length;
			}
			
			public function nextPreCutOpf():void{
				var _lg:int=this.viewPages.length;
				this.currentPage=this.viewPages[_lg-1].opfPage;
				var opIndex:int=this._model.book.spine.getPageNumberByPage(currentPage);
				this.currentPageIndex=opIndex;
				setFirstOrLast(currentPageIndex);
				while(viewPages.length-nowpage<50){
					if(this.isLastOpf){
						totalpage=viewPages.length;
						return;
					}
					this.nextOpfPage();
				}
				totalpage=viewPages.length;
			}
			
			public function resetPageFlip(_index:int,isPrev:Boolean):void{
				mypageflip.book_totalpage=totalpage;
				mypageflip.book_page=_index;
				mypageflip.book_topage=_index;
				mypageflip.bookArr=this.viewPages;
				if(isPrev){
					mypageflip.setLoadMcPrev();
				}else{
					mypageflip.SetLoadMCNext();
				}
				mypageflip.SetPageMC(_index);
				nowpage=mypageflip.book_page;
				resetViewPage(nowpage);
			}
		]]>
	</fx:Script>
	<s:HGroup>
		<s:Button id="prevBtn" label="PREV" click="prevOpfPage()"/>
		<s:Button id="nextBtn" label="NEXT" click="nextOpfPage()"/>
		<s:Label id="pageNum" fontSize="18"/>
		<s:Button id="markBtn" label="MARK" click="markBtn_clickHandler(event)"/>
		<mx:Spacer width="300"/>
		<s:Button id="sizeBtn" label="resetSize" click="sizeBtn_clickHandler(event)"/>
		<mx:Spacer width="50"/>
		
		<s:Button id="viewPrevBtn" label="前翻" click="prevViewPage()"/>
		<s:Label id="viewPageNum" fontSize="18"/>
		<s:Button id="viewNextBtn" label="后翻" click="nextViewPage()"/>
	</s:HGroup>
	<s:Group id="bookView" x="30" y="50"/>
	<s:TextArea x="30" y="50" id="ta"/>
	<s:List visible="false" y="50"  id="ncxList" x="510" width="300" height="600" labelField="navLabel"/>
	<s:Group visible="false" x="850" y="50" id="markGroup" width="200" height="600"/>
</s:Application>
